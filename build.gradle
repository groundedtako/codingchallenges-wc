plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

group = 'com.groundedtako'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
}

application {
    mainClass = 'com.groundedtako.coreutils.Main'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.groundedtako.coreutils.Main'
    }
    archiveFileName = 'coreutils.jar'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/groundedtako/**'])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
            excludes = ['com.groundedtako.coreutils.**']
        }
    }
}
//check.dependsOn(jacocoTestCoverageVerification)

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

sourceCompatibility = '17'
targetCompatibility = '17'
